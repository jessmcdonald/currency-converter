{"version":3,"sources":["components/converter/Converter.js","components/history/History.js","App.js","serviceWorker.js","index.js"],"names":["eurovals","currency","convertval","Converter","props","state","value","currencyIdFrom","currencyIdTo","conversion","timestamp","history","handleChange","event","setState","target","handleCurrencyChange","handleCurrencyFrom","newCurrencyConvert","fromId","toId","axios","post","headers","accept","body","from","to","then","response","multiplier","data","console","log","catch","error","currencyConvert","preventDefault","val","parseFloat","toFixed","datenow","Date","i","length","answer","toUTCString","addItemToHistory","className","this","onSubmit","handleSubmit","type","onChange","id","onClick","React","Component","History","map","item","key","App","newitem","updatedHistory","unshift","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d7e46463.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./Converter.css\";\n\nconst eurovals = [\n  { currency: \"USD\", convertval: 1.09322 },\n  { currency: \"GBP\", convertval: 0.87345 },\n  { currency: \"YEN\", convertval: 117.431 },\n  { currency: \"CHF\", convertval: 1.05378 },\n];\n\nclass Converter extends React.Component {\n  state = {\n    value: \"\",\n    currencyIdFrom: \"EUR\",\n    currencyIdTo: null,\n    conversion: null,\n    timestamp: null,\n    history: [],\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleCurrencyChange = (event) => {\n    this.setState({ currencyIdTo: event.target.value });\n  };\n\n  handleCurrencyFrom = (event) => {\n    this.setState({ currencyIdFrom: event.target.value });\n  };\n\n  newCurrencyConvert = (fromId, toId) => {\n    axios\n      .post(\n        \"https://igfcc7aebk.execute-api.sa-east-1.amazonaws.com/default/money-conversion-interview-exercise-api\",\n        {\n          headers: {\n            accept: \"application/json\",\n          },\n          body: {\n            from: fromId,\n            to: toId,\n          },\n        }\n      )\n      .then((response) => {\n        this.setState({ multiplier: response.data.multiplier });\n        console.log(this.state.multiplier);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  currencyConvert = (event) => {\n    //prevent automatic refresh with submit\n    event.preventDefault();\n\n    let val = parseFloat(this.state.value).toFixed(2);\n    let currencyIdTo = this.state.currencyIdTo;\n    let currencyIdFrom = this.state.currencyIdFrom;\n    let datenow = new Date();\n\n    //call function to get multiplier from api\n    //this.newCurrencyConvert(currencyIdFrom, currencyIdTo);\n\n    for (let i = 0; i < eurovals.length; i++) {\n      if (eurovals[i].currency === currencyIdTo) {\n        let answer = eurovals[i].convertval * val;\n        this.setState({ conversion: answer.toFixed(2) });\n        this.setState({ timestamp: datenow.toUTCString() });\n\n        //call function to add conversion to history array\n        this.props.addItemToHistory({\n          timestamp: datenow.toUTCString(),\n          fromId: currencyIdFrom,\n          toId: currencyIdTo,\n          value: val,\n          conversion: answer.toFixed(2),\n        });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"convertor-container\">\n        {this.state.value && this.state.currencyIdFrom ? (\n          <div className=\"user-input-amount item-1\">\n            {this.state.value} {this.state.currencyIdFrom} equals\n          </div>\n        ) : (\n          <div className=\"item-1\">\n            <h3>Enter a value to begin</h3>\n          </div>\n        )}\n        {this.state.conversion ? (\n          <div className=\"return-value item-2\">\n            {this.state.conversion} {this.state.currencyIdTo}\n          </div>\n        ) : (\n          <div className=\"item-2\"></div>\n        )}\n\n        {this.state.timestamp ? (\n          <div className=\"date-of-conversion item-3\">\n            {this.state.timestamp}\n          </div>\n        ) : (\n          <div className=\"item-3\"></div>\n        )}\n\n        <form className=\"conversion-form item-4\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"number\"\n            value={this.state.value}\n            onChange={this.handleChange}\n            className=\"form-item text-input\"\n          />\n          <select\n            id=\"currency-from\"\n            onChange={this.handleCurrencyFrom}\n            className=\"form-item\"\n          >\n            <option value=\"EUR\">EUR</option>\n            <option value=\"USD\">USD</option>\n            <option value=\"YEN\">YEN</option>\n            <option value=\"CHF\">CHF</option>\n          </select>\n          <select\n            id=\"currency-to\"\n            onChange={this.handleCurrencyChange}\n            className=\"form-item\"\n          >\n            <option value=\"EUR\">EUR</option>\n            <option value=\"USD\">USD</option>\n            <option value=\"YEN\">YEN</option>\n            <option value=\"CHF\">CHF</option>\n          </select>\n          <input\n            type=\"submit\"\n            id=\"convert\"\n            onClick={this.currencyConvert}\n            value=\"Convert\"\n            className=\"form-item\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Converter;\n","import React from \"react\";\nimport \"./History.css\";\n\nclass History extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"history-container\">\n        <h3>History</h3>\n        {this.props.history.map((item) => (\n          <div key={item.timestamp} className=\"history-item\">\n            <h6>{item.timestamp}</h6>\n            <h5>\n              {item.value} {item.fromId} was {item.conversion} {item.toId}\n            </h5>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default History;\n","import React from \"react\";\nimport \"./App.css\";\nimport Converter from \"./components/converter/Converter\";\nimport History from \"./components/history/History\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      history: [],\n    };\n  }\n\n  addItemToHistory = (newitem) => {\n    let updatedHistory = this.state.history;\n    updatedHistory.unshift(newitem);\n    this.setState({ history: updatedHistory });\n    console.log(this.state.history);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Converter addItemToHistory={this.addItemToHistory} />\n        <History history={this.state.history} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}